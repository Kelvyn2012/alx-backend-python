pipeline {
  agent any
  options { timestamps() }
  parameters {
    string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
  }
  environment {
    GITHUB_CREDENTIALS_ID = 'github-creds'   // Match your actual ID
    REPORT_DIR = 'reports'
    PYTHON_VERSION = '3.10'
    DOCKER_IMAGE = "python:${PYTHON_VERSION}"
  }
  stages {
    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH}"]],
          userRemoteConfigs: [[
            url: 'https://github.com/Kelvyn2012/alx-backend-python.git',
            credentialsId: GITHUB_CREDENTIALS_ID  // Reference your GitHub credentials here
          ]]
        ])
      }
    }
    
    stage('Docker sanity check') {
      steps {
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
          sh 'docker version'
        }
      }
    }

    stage('Run tests in python:3.10') {
      steps {
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
          script {
            docker.image(DOCKER_IMAGE).inside('-u 0:0') {
              dir('messaging_app') {
                // Check if requirements.txt exists and install dependencies
                sh '''
                  if [ -f requirements.txt ]; then
                    echo "Installing dependencies..."
                    pip3 install --upgrade pip
                    pip3 install -r requirements.txt
                  else
                    echo "No requirements.txt found, skipping dependency installation."
                  fi
                '''

                // Install additional testing tools (pytest and coverage)
                sh 'pip3 install pytest pytest-cov'

                // Run tests and generate reports
                sh '''
                  mkdir -p ${REPORT_DIR}
                  pytest -q --junitxml=${REPORT_DIR}/pytest-junit.xml --cov=. --cov-report=term-missing
                '''
              }
            }
          }
        }
      }
    }
  }
  post {
    always {
      junit allowEmptyResults: true, testResults: 'messaging_app/reports/pytest-junit.xml'
      archiveArtifacts artifacts: 'messaging_app/reports/**', fingerprint: true
    }
  }
}
