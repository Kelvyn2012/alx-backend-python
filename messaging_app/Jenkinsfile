pipeline {
  agent any

  options {
    timestamps()
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
  }

  environment {
    GITHUB_CREDENTIALS_ID = 'github-creds'     // update if you used a different ID
    REPORT_DIR = 'reports'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH}"]],
          userRemoteConfigs: [[
            url: 'https://github.com/Kelvyn2012/alx-backend-python.git',
            credentialsId: GITHUB_CREDENTIALS_ID
          ]]
        ])
      }
    }

    stage('Set up Python & Install Deps') {
      steps {
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
          dir('messaging_app') {
            withPythonEnv('Python 3.10') {
              sh 'python --version'
              sh 'python -m venv .venv'
              sh '. .venv/bin/activate && python -m pip install --upgrade pip'
              sh '''
                . .venv/bin/activate
                if [ -f requirements.txt ]; then
                  pip install -r requirements.txt
                fi
                pip install pytest pytest-cov
              '''
            }
          }
        }
      }
    }

    stage('Run Tests (pytest)') {
      steps {
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
          dir('messaging_app') {
            sh 'mkdir -p ${REPORT_DIR}'
            sh '''
              . .venv/bin/activate
              pytest -q \
                --junitxml=${REPORT_DIR}/pytest-junit.xml \
                --cov=. --cov-report=term-missing
            '''
          }
        }
      }
    }
  }

  post {
    always {
      junit allowEmptyResults: true, testResults: 'messaging_app/reports/pytest-junit.xml'
      archiveArtifacts artifacts: 'messaging_app/reports/**', fingerprint: true
    }
  }
}
